formula <- as.formula(paste("~", paste(vars, collapse = " + "), "|", group))
} else {
formula <- as.formula(paste("~", paste(vars, collapse = " + ")))
}
if(overall) overall <- "Overall"
if (mean_sd) {
table1(formula,
data = data,
overall = overall,
render.continuous = function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)))
} else {
table1(formula,
data = data,
overall = overall)
}
}
# Scatterplot function
scatter_plot <- function(data, group_var, x = "centiloid", y = "plasmaGFAP_z",
xlab = "AÎ²-PET centiloid", ylab = "Plasma GFAP (z-scored)",
colors = c("MA-" = "#B28C36", "MA+" = "#2A3345"),
xlim = c(-15, 155), ylim = c(-3, 6)) {
ggplot(data, aes_string(x = x, y = y, color = group_var, fill = group_var)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = xlab, y = ylab) +
coord_cartesian(xlim = xlim, ylim = ylim) +
scale_x_continuous(breaks = seq(0, xlim[2], 50), expand = c(0.035, 0.035)) +
scale_y_continuous(breaks = seq(ylim[1], ylim[2], 1.5), expand = c(0, 0)) +
theme_minimal() +
theme(
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color = "gray", size = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black", size = 0.2),
axis.text = element_text(size = 17, color = "black"),
axis.title = element_text(size = 17, color = "black"),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(0.08, "cm"),
legend.position = "left",
legend.text = element_text(size = 17, color = "black")
)
}
# Function for linear regression with summary and CI
run_lm <- function(formula, data, show_visualizations = TRUE, visreg_args = NULL) {
model <- lm(formula, data = data)
# Print summary and CI
print(summary(model))
print(confint(model))
if(show_visualizations) {
# Residual plots
par(mfrow = c(1,3))
hist(residuals(model), main = "Histogram of Residuals", xlab = "Residuals", freq = FALSE)
qqnorm(residuals(model), main = "Q-Q Plot of Residuals")
qqline(residuals(model), lwd = 1)
plot(model, which = 3)
par(mfrow = c(1,1))
# Optional 2D visreg plot
if(!is.null(visreg_args)) {
do.call(visreg2d, c(list(model), visreg_args))
}
}
return(model)
}
#### 1. Load TRIAD Data ####
sTREM2_TRIAD <- read_excel("Input_Tables/sTREM2_SecondarySample_TRIAD.xlsx")
factor_levels_TRIAD <- list(
sex = c("F", "M"),
apoee4_status = c("Noncarrier", "Carrier"),
DX2 = c("CU", "CI"),
MA_positivity = c("MA-", "MA+")
)
sTREM2_TRIAD <- set_factors(sTREM2_TRIAD, factor_levels_TRIAD)
##### Table ####
sTREM2_SecondarySample_TRIAD_filtered <- sTREM2_TRIAD %>%
filter(DX2 == "CU", age_at_mri >= 65, age_at_mri < 76)
make_table1(
vars = c("sTREM2", "MA_positivity", "age_at_mri"),
group = "DX2",
data = sTREM2_SecondarySample_TRIAD_filtered,
mean_sd = FALSE,
overall = TRUE
)
#### 1.2. Time differences between biomarkers ####
# List of time-difference columns
time_diff_cols <- c("Correct_Time_difference_CSF_AbPET",
"CorrectTime_difference_plasma_AbPET",
"Correct_Time_difference_CSF_Plasma")
# Compute median and IQR for all columns
time_diff_summary <- sTREM2_TRIAD %>%
select(all_of(time_diff_cols)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
summarise(
median = median(value, na.rm = TRUE),
IQR = IQR(value, na.rm = TRUE),
.groups = "drop"
)
time_diff_summary
#### 1.3. Stratification ####
sTREM2_TRIAD_by_MA <- sTREM2_TRIAD %>% split(.$MA_positivity)
#### 1.4. Scatterplot ####
scatter_plot(sTREM2_TRIAD, group_var = "MA_positivity", x = "Centiloid", y = "plasmaGFAP_pgmL_normalized_z")
#### 1.5. Regressions ####
##### Model01 ####
Model01 <- run_lm(formula = plasmaGFAP_pgmL_normalized_z ~ Centiloid + age_at_mri + sex + DX2,
data = sTREM2_TRIAD_by_MA[["MA-"]])
##### Model02 ####
Model02 <- run_lm(formula = plasmaGFAP_pgmL_normalized_z ~ Centiloid + age_at_mri + sex + DX2,
data = sTREM2_TRIAD_by_MA[["MA+"]])
##### Model03 ####
Model03 <- run_lm(formula = plasmaGFAP_pgmL_normalized_z ~ Centiloid*MA_positivity + age_at_mri + sex + DX2,
data = sTREM2_TRIAD)
#### 2. Load WRAP Data ####
sTREM2_WRAP <- read_excel("Input_Tables/sTREM2_SecondarySample_WRAP.xlsx")
factor_levels_WRAP <- list(
Gender = c("F", "M"),
APOE4_status = c("0", "1"),
DX2 = c("CU", "CI"),
AB_positivity = c("0", "1"),
Batch = c("NTK1", "NTK2"),
MA_positivity = c("MA-", "MA+")
)
sTREM2_WRAP <- set_factors(sTREM2_WRAP, factor_levels_WRAP)
##### Table ####
sTREM2_WRAP_filtered <- sTREM2_WRAP %>%
filter(DX2 == "CU", AgeAtVisit >= 65, AgeAtVisit < 76)
make_table1(
vars = c("sTREM2", "MA_positivity", "AgeAtVisit"),
group = "DX2",
data = sTREM2_WRAP_filtered,
mean_sd = FALSE,
overall = TRUE
)
quantile(sTREM2_WRAP_filtered$sTREM2_adj, probs = 0.423, type = 7)
#### 2.2. Time differences between biomarkers ####
time_diff_cols <- c("Correct_Difference_age_abPET_sTREM2",
"Correct_Difference_age_GFAP_abPET",
"Correct_Difference_age_GFAP_sTREM2")
# Compute median and IQR for all columns
time_diff_summary <- sTREM2_WRAP %>%
select(all_of(time_diff_cols)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
summarise(
median = median(value, na.rm = TRUE),
IQR = IQR(value, na.rm = TRUE),
.groups = "drop"
)
time_diff_summary
# Batch adjustment for sTREM2
Model_adj <- lm(sTREM2 ~ Batch, data = sTREM2_WRAP)
sTREM2_WRAP$sTREM2_adj <- resid(Model_adj) + mean(sTREM2_WRAP$sTREM2, na.rm = TRUE)
#### 2.3. Stratification ####
sTREM2_WRAP_by_MA <- sTREM2_WRAP %>% split(.$MA_positivity)
#### 2.4. Scatterplot ####
scatter_plot(sTREM2_WRAP, group_var = "MA_positivity", x = "centiloid", y = "PlasmaGFAP_pgmL_z", xlim = c(-15, 110))
#### 2.5. Regressions ####
##### Model04 ####
Model04 <- run_lm(formula = PlasmaGFAP_pgmL_z ~ centiloid + AgeAtVisit + Gender + DX2,
data = sTREM2_WRAP_by_MA[["MA-"]])
##### Model05 ####
Model05 <- run_lm(formula = PlasmaGFAP_pgmL_z ~ centiloid + AgeAtVisit + Gender + DX2,
data = sTREM2_WRAP_by_MA[["MA+"]])
##### Model06 ####
Model06 <- run_lm(formula = PlasmaGFAP_pgmL_z ~ centiloid*MA_positivity + AgeAtVisit + Gender + DX2,
data = sTREM2_WRAP)
#### Load Libraries ####
library(readxl)
library(table1)
library(dplyr)
library(ggplot2)
library(stats)
library(grid)
#### Helper Functions ####
# Factor assignment helper
set_factors <- function(df, factor_levels) {
df %>%
mutate(across(names(factor_levels), ~factor(.x, levels = factor_levels[[cur_column()]])))
}
# Reusable table1 helper
make_table1 <- function(vars, group, data, mean_sd = TRUE, overall = TRUE) {
if (!is.null(group)) {
formula <- as.formula(paste("~", paste(vars, collapse = " + "), "|", group))
} else {
formula <- as.formula(paste("~", paste(vars, collapse = " + ")))
}
if(overall) overall <- "Overall"
if (mean_sd) {
table1(formula,
data = data,
overall = overall,
render.continuous = function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)))
} else {
table1(formula,
data = data,
overall = overall)
}
}
#### 1. Load Data ####
AHBA_donors <- read_excel("Input_Tables/AHBA_donors.xlsx")
factor_levels <- list(
Sex = c("Female", "Male")
)
AHBA_donors <- set_factors(AHBA_donors, factor_levels)
##### Table ####
make_table1(vars = c("Age_y", "Sex", "PMI"),
group = "",
data = AHBA_donors,
mean_sd = TRUE,
overall = TRUE)
#### Load Libraries ####
library(readxl)
library(table1)
library(dplyr)
library(ggplot2)
library(stats)
library(grid)
#### Helper Functions ####
# Factor assignment helper
set_factors <- function(df, factor_levels) {
df %>%
mutate(across(names(factor_levels), ~factor(.x, levels = factor_levels[[cur_column()]])))
}
# Reusable table1 helper
make_table1 <- function(vars, group, data, mean_sd = TRUE, overall = TRUE) {
if (!is.null(group)) {
formula <- as.formula(paste("~", paste(vars, collapse = " + "), "|", group))
} else {
formula <- as.formula(paste("~", paste(vars, collapse = " + ")))
}
if(overall) overall <- "Overall"
if (mean_sd) {
table1(formula,
data = data,
overall = overall,
render.continuous = function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)))
} else {
table1(formula,
data = data,
overall = overall)
}
}
#### 1. Load Data ####
AHBA_donors <- read_excel("Input_Tables/AHBA_donors.xlsx")
factor_levels <- list(
Sex = c("Female", "Male")
)
AHBA_donors <- set_factors(AHBA_donors, factor_levels)
##### Table ####
make_table1(vars = c("Age_y", "Sex", "PMI"),
group = NULL,
data = AHBA_donors,
mean_sd = TRUE,
overall = TRUE)
library(readxl)
library(table1)
library(stats)
#################################################################################
######################## 1. AHBA Table Import #############################
#################################################################################
AHBA_donors <- read_excel("Input_Tables/AHBA_donors.xlsx")
#################################################################################
####################### 1.1. Classifying variables ##############################
#################################################################################
AHBA_donors$Sex <- factor(AHBA_donors$Sex, levels = c("Female", "Male"))
#################################################################################
############################# 1.2. Demographics #################################
#################################################################################
table1::table1(~Age_y	+ Sex	+	PMI, data = AHBA_donors)
#### Load Libraries ####
library(readxl)
library(table1)
library(dplyr)
library(ggplot2)
library(stats)
library(grid)
#### Helper Functions ####
# Factor assignment helper
set_factors <- function(df, factor_levels) {
df %>%
mutate(across(names(factor_levels), ~factor(.x, levels = factor_levels[[cur_column()]])))
}
# Reusable table1 helper
make_table1 <- function(vars, group, data, mean_sd = TRUE, overall = TRUE) {
if (!is.null(group)) {
formula <- as.formula(paste("~", paste(vars, collapse = " + "), "|", group))
} else {
formula <- as.formula(paste("~", paste(vars, collapse = " + ")))
}
if(overall) overall <- "Overall"
if (mean_sd) {
table1(formula,
data = data,
overall = overall,
render.continuous = function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)))
} else {
table1(formula,
data = data,
overall = overall)
}
}
#### 1. Load Data ####
AHBA_donors <- read_excel("Input_Tables/AHBA_donors.xlsx")
factor_levels <- list(
Sex = c("Female", "Male")
)
AHBA_donors <- set_factors(AHBA_donors, factor_levels)
##### Table ####
make_table1(vars = c("Age_y", "Sex", "PMI"),
group = NULL,
data = AHBA_donors,
mean_sd = FALSE,
overall = TRUE)
##### Table ####
make_table1(vars = c("Age_y", "Sex", "PMI"),
group = NULL,
data = AHBA_donors,
mean_sd = TRUE,
overall = TRUE)
##### Table ####
make_table1(vars = c("Age_y", "Sex", "PMI"),
group = NULL,
data = AHBA_donors,
mean_sd = FALSE,
overall = TRUE)
table1::table1(~Age_y	+ Sex	+	PMI, data = AHBA_donors)
#### Load Library ####
library(readxl)
library(table1)
library(dplyr)
library(ggplot2)
library(grid)
#### Helper Functions ####
# Factor assignment helper
set_factors <- function(df, factor_levels) {
df %>%
mutate(across(names(factor_levels), ~factor(.x, levels = factor_levels[[cur_column()]])))
}
# Reusable table1 helper
make_table1 <- function(vars, group, data, mean_sd = TRUE, overall = TRUE) {
formula <- as.formula(
paste("~", paste(vars, collapse = " + "), "|", group)
)
if(overall) {
overall <- "Overall"
}
if (mean_sd) {
table1(formula,
data = data,
overall = overall,
render.continuous = function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)))
} else {
table1(formula,
data = data,
overall = overall)
}
}
# Run regressions programmatically
run_multiple_regressions <- function(outcomes, base_formula, data) {
lapply(outcomes, function(outcome) {
model <- lm(as.formula(paste(outcome, base_formula)), data = data)
summary(model)
}) |> setNames(outcomes)
}
# Reusable plot function
plot_grouped_bar <- function(data, var, ylab_text, ylim_range) {
summary_stats <- data %>%
group_by(Clinical_Group_CU_AD) %>%
summarise(Mean = mean(.data[[var]], na.rm = TRUE),
SD = sd(.data[[var]], na.rm = TRUE), .groups = 'drop')
ggplot(summary_stats, aes(x = Clinical_Group_CU_AD, y = Mean)) +
geom_col(fill = "gray", width = 0.7) +
geom_errorbar(aes(ymin = Mean, ymax = Mean + SD), width = 0.2) +
geom_point(data = data, aes(y = .data[[var]], color = Clinical_Group_CU_AD),
position = position_jitter(width = 0.2), size = 5.5) +
theme_minimal(base_size = 17) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 0.2),
legend.position = "left") +
ylab(ylab_text) +
xlab("Clinical Diagnosis") +
coord_cartesian(ylim = ylim_range) +
scale_y_continuous(breaks = seq(ylim_range[1], ylim_range[2], 0.2), expand = c(0,0))
}
#### 1. TSPO_signature_CUneg_ADpos ####
###### Load data ####
TSPO_signature_CUneg_ADpos <- read_excel("Input_Tables/TSPO_signature_CUneg_ADpos.xlsx")
# Define factor levels
factor_levels <- list(
sex = c("F", "M"),
Clinical_Group_CU_AD = c("CU", "AD"),
apoee4_status = c("Noncarrier", "Carrier"),
AB_threshold = c("0", "1")
)
# Apply factor levels
TSPO_PrimarySample <- set_factors(TSPO_signature_CUneg_ADpos, factor_levels)
#### Load Library ####
library(readxl)
library(table1)
library(dplyr)
library(ggplot2)
library(grid)
#### Helper Functions ####
# Factor assignment helper
set_factors <- function(df, factor_levels) {
df %>%
mutate(across(names(factor_levels), ~factor(.x, levels = factor_levels[[cur_column()]])))
}
# Reusable table1 helper
make_table1 <- function(vars, group, data, mean_sd = TRUE, overall = TRUE) {
formula <- as.formula(
paste("~", paste(vars, collapse = " + "), "|", group)
)
if(overall) {
overall <- "Overall"
}
if (mean_sd) {
table1(formula,
data = data,
overall = overall,
render.continuous = function(x) sprintf("%.2f (%.2f)", mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)))
} else {
table1(formula,
data = data,
overall = overall)
}
}
# Run regressions programmatically
run_multiple_regressions <- function(outcomes, base_formula, data) {
lapply(outcomes, function(outcome) {
model <- lm(as.formula(paste(outcome, base_formula)), data = data)
summary(model)
}) |> setNames(outcomes)
}
# Reusable plot function
plot_grouped_bar <- function(data, var, ylab_text, ylim_range) {
summary_stats <- data %>%
group_by(Clinical_Group_CU_AD) %>%
summarise(Mean = mean(.data[[var]], na.rm = TRUE),
SD = sd(.data[[var]], na.rm = TRUE), .groups = 'drop')
ggplot(summary_stats, aes(x = Clinical_Group_CU_AD, y = Mean)) +
geom_col(fill = "gray", width = 0.7) +
geom_errorbar(aes(ymin = Mean, ymax = Mean + SD), width = 0.2) +
geom_point(data = data, aes(y = .data[[var]], color = Clinical_Group_CU_AD),
position = position_jitter(width = 0.2), size = 5.5) +
theme_minimal(base_size = 17) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black", size = 0.2),
legend.position = "left") +
ylab(ylab_text) +
xlab("Clinical Diagnosis") +
coord_cartesian(ylim = ylim_range) +
scale_y_continuous(breaks = seq(ylim_range[1], ylim_range[2], 0.2), expand = c(0,0))
}
#### 1. TSPO_signature_CUneg_ADpos ####
###### Load data ####
TSPO_signature_CUneg_ADpos <- read_excel("Input_Tables/TSPO_signature_CUneg_ADpos.xlsx")
# Apply factor levels
factor_levels <- list(
sex = c("F", "M"),
Clinical_Group_CU_AD = c("CU", "AD"),
apoee4_status = c("Noncarrier", "Carrier"),
AB_threshold = c("0", "1")
)
TSPO_PrimarySample <- set_factors(TSPO_signature_CUneg_ADpos, factor_levels)
demographic_vars <- c("age_at_mri", "sex", "AB_threshold")
make_table1(vars = demographic_vars,
group = "Clinical_Group_CU_AD",
data = TSPO_signature_CUneg_ADpos,
mean_sd = FALSE)
# Collect PBR
continuous_vars <- c("PBR_HC", "PBR_ENTH", "PBR_AG", "PBR_THAL", "PBR_CAUD",
"PBR_PUTA", "PBR_PALL", "PBR_ACUM", "PBR_cACC", "PBR_cMFC",
"PBR_CUN", "PBR_FG", "PBR_IP", "PBR_infTC", "PBR_isthCC",
"PBR_OC", "PBR_latOFC", "PBR_LING", "PBR_medOFC", "PBR_midTC",
"PBR_paraHC", "PBR_paraCent", "PBR_parsOPC", "PBR_parsORB",
"PBR_parsTRI", "PBR_periCalc", "PBR_postCent", "PBR_PCC",
"PBR_preCent", "PBR_PCUN", "PBR_rACC", "PBR_rmidFC", "PBR_SF",
"PBR_SP", "PBR_supTC", "PBR_supraMG", "PBR_transTC", "PBR_insula")
# Table for mean (SD) per region
make_table1(vars = continuous_vars, group = "Clinical_Group_CU_AD", data = TSPO_signature_CUneg_ADpos, mean_sd = TRUE, overall = FALSE)
# Difference table between CU A- & AD A+
difference_table <- TSPO_signature_CUneg_ADpos %>%
group_by(Clinical_Group_CU_AD) %>%
summarise(across(all_of(continuous_vars), ~mean(.x, na.rm = TRUE), .names = "{.col}")) %>%
tidyr::pivot_longer(-Clinical_Group_CU_AD, names_to = "Variable", values_to = "Mean") %>%
tidyr::pivot_wider(names_from = Clinical_Group_CU_AD, values_from = Mean) %>%
mutate(difference = AD - CU)
print(difference_table)
# Calculate the 90th percentile
percentile_90 <- quantile(difference_table$difference, probs = 0.9)
# Print the result
print(percentile_90)
results_PBR <- run_multiple_regressions(
continuous_vars, "~ Clinical_Group_CU_AD + age_at_mri + sex", TSPO_signature_CUneg_ADpos
)
results_PBR
plot_grouped_bar(TSPO_signature_CUneg_ADpos, "PBR_PCC",
"TSPO PET SUVR (posterior cingulate cortex)", c(0.8, 1.8))
plot_grouped_bar(TSPO_signature_CUneg_ADpos, "PBR_DKT_difference_composite",
"TSPO PET SUVR (difference-derived composite brain region)", c(0.8, 1.8))
plot_grouped_bar(TSPO_signature_CUneg_ADpos, "PBR_DKT_T_composite",
"TSPO PET SUVR (T-derived composite brain region)", c(0.8, 1.6))
anova_results <- lapply(c("PBR_PCC", "PBR_DKT_difference_composite", "PBR_DKT_T_composite"), function(v) {
aov(as.formula(paste(v, "~ Clinical_Group_CU_AD + age_at_mri + sex")), data = TSPO_signature_CUneg_ADpos) |> summary()
}) |> setNames(c("PCC", "Difference_composite", "T_composite"))
anova_results
